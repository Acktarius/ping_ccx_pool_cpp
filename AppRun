#!/bin/bash

# Function to check if a package is installed
check_package() {
    if ! command -v $1 &> /dev/null; then
        return 1
    fi
    return 0
}

# Get the directory where the AppImage is mounted
APPDIR="$(dirname "$(readlink -f "$0")")"
APPIMAGE_PATH="$(readlink -f "$0")"

# 1. Check for zenity
if ! check_package zenity; then
    echo "Zenity is required. Please install it using your package manager and try again."
    exit 1
fi

# 2. Determine package manager
PM_NAME=""
PM_CMD=""
POLKIT_PKG=""

if command -v apt &> /dev/null; then
    PM_NAME="apt"
    PM_CMD="apt install -y"
    POLKIT_PKG="policykit-1"
elif command -v dnf &> /dev/null; then
    PM_NAME="dnf"
    PM_CMD="dnf install -y"
    POLKIT_PKG="polkit"
elif command -v pacman &> /dev/null; then
    PM_NAME="pacman"
    PM_CMD="pacman -S --noconfirm"
    POLKIT_PKG="polkit"
elif command -v zypper &> /dev/null; then
    PM_NAME="zypper"
    PM_CMD="zypper install -y"
    POLKIT_PKG="polkit"
else
    zenity --error --title="Error" --text="Could not detect package manager.\nPlease install required packages manually."
    exit 1
fi

# 3. Check and install polkit if needed
if ! command -v pkexec &> /dev/null; then
    if zenity --question \
        --title="Install Dependency" \
        --text="Polkit is required and needs to be installed.\nWould you like to install it now?" \
        --ok-label="Install" \
        --cancel-label="Cancel"; then
        
        if [ "$PM_NAME" = "pacman" ]; then
            sudo $PM_CMD $POLKIT_PKG
        else
            sudo $PM_CMD $POLKIT_PKG
        fi
        
        if ! command -v pkexec &> /dev/null; then
            zenity --error --title="Error" --text="Failed to install polkit. Please install it manually."
            exit 1
        fi
    else
        exit 1
    fi
fi

# 4. Check and install nmap if needed
if ! check_package nping; then
    if zenity --question \
        --title="Install Dependency" \
        --text="Nmap is required and needs to be installed.\nWould you like to install it now?" \
        --ok-label="Install" \
        --cancel-label="Cancel"; then
        
        if ! pkexec $PM_CMD nmap; then
            zenity --error --title="Error" --text="Failed to install nmap. Please install it manually."
            exit 1
        fi
    else
        exit 1
    fi
fi

# 5. Setup desktop file
DESKTOP_FILE="/usr/share/applications/PingCCXPool.desktop"
if [ ! -f "$DESKTOP_FILE" ]; then
    DESKTOP_CONTENT="[Desktop Entry]
Type=Application
Name=PingCCXPool
Comment=Ping Conceal Network mining pools
Exec=${APPIMAGE_PATH}
Icon=PingCCXPool
Categories=Network;Utility;
Terminal=false"

    if zenity --question \
        --title="Desktop Integration" \
        --text="Would you like to add PingCCXPool to your applications menu?" \
        --ok-label="Yes" \
        --cancel-label="No"; then
        
        echo "$DESKTOP_CONTENT" | pkexec tee "$DESKTOP_FILE" > /dev/null
        pkexec chmod 644 "$DESKTOP_FILE"
    fi
fi

# 6. Setup icon
ICON_DIR="/usr/share/icons/hicolor"
ICON_SIZES=("128x128" "256x256")

for SIZE in "${ICON_SIZES[@]}"; do
    ICON_PATH="$ICON_DIR/$SIZE/apps"
    TARGET_ICON="$ICON_PATH/PingCCXPool.png"
    
    if [ ! -f "$TARGET_ICON" ] && [ ! -L "$TARGET_ICON" ]; then
        if [ ! -d "$ICON_PATH" ]; then
            pkexec mkdir -p "$ICON_PATH"
        fi
        pkexec cp "$APPDIR/usr/share/icons/hicolor/$SIZE/apps/PingCCXPool.png" "$TARGET_ICON"
        pkexec chmod 644 "$TARGET_ICON"
    fi
done

# 7. Launch the application
exec "$APPDIR/usr/bin/PingCCXPool" "$@"