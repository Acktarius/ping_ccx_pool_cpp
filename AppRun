#!/bin/bash

# Function to check if a package is installed
check_package() {
    if ! command -v $1 &> /dev/null; then
        return 1
    fi
    return 0
}

# Get the directory where the AppImage is mounted
APPDIR="$(dirname "$(readlink -f "$0")")"

# 1. Check for zenity
if ! check_package zenity; then
    echo "Zenity is required. Please install it using your package manager and try again."
    exit 1
fi

# 2. Determine package manager
PM_NAME=""
PM_CMD=""
POLKIT_PKG=""

if command -v apt &> /dev/null; then
    PM_NAME="apt"
    PM_CMD="apt install -y"
    POLKIT_PKG="policykit-1"
elif command -v dnf &> /dev/null; then
    PM_NAME="dnf"
    PM_CMD="dnf install -y"
    POLKIT_PKG="polkit"
elif command -v pacman &> /dev/null; then
    PM_NAME="pacman"
    PM_CMD="pacman -S --noconfirm"
    POLKIT_PKG="polkit"
elif command -v zypper &> /dev/null; then
    PM_NAME="zypper"
    PM_CMD="zypper install -y"
    POLKIT_PKG="polkit"
else
    zenity --error --title="Error" --text="Could not detect package manager.\nPlease install required packages manually."
    exit 1
fi

# 3. Check and install polkit if needed
if ! command -v pkexec &> /dev/null; then
    if zenity --question \
        --title="Install Dependency" \
        --text="Polkit is required and needs to be installed.\nWould you like to install it now?" \
        --ok-label="Install" \
        --cancel-label="Cancel"; then
        
        if [ "$PM_NAME" = "pacman" ]; then
            sudo $PM_CMD $POLKIT_PKG
        else
            sudo $PM_CMD $POLKIT_PKG
        fi
        
        if ! command -v pkexec &> /dev/null; then
            zenity --error --title="Error" --text="Failed to install polkit. Please install it manually."
            exit 1
        fi

        # Install policy file after polkit is installed
        POLICY_FILE="$APPDIR/usr/share/PingCCXPool/resources/org.acktarius.nping.policy"
        if [ ! -f "/usr/share/polkit-1/actions/org.acktarius.nping.policy" ] && [ -f "$POLICY_FILE" ]; then
            if ! pkexec cp "$POLICY_FILE" /usr/share/polkit-1/actions/; then
                zenity --error --title="Error" --text="Failed to install polkit policy file."
                exit 1
            fi
        fi
    else
        exit 1
    fi
fi

# 4. Check and install nmap if needed
if ! check_package nping; then
    if zenity --question \
        --title="Install Dependency" \
        --text="Nmap is required and needs to be installed.\nWould you like to install it now?" \
        --ok-label="Install" \
        --cancel-label="Cancel"; then
        
        if ! pkexec $PM_CMD nmap; then
            zenity --error --title="Error" --text="Failed to install nmap. Please install it manually."
            exit 1
        fi
    else
        exit 1
    fi
fi

# Setup desktop file if not exists
if [ -n "$APPIMAGE" ]; then  # Only create desktop file if we're running as an AppImage
    DESKTOP_FILE="/usr/share/applications/PingCCXPool.desktop"
    if [ ! -f "$DESKTOP_FILE" ]; then
        if zenity --question \
            --title="Desktop Integration" \
            --text="Would you like to add PingCCXPool to your applications menu?" \
            --ok-label="Yes" \
            --cancel-label="No"; then
            
            # Create desktop file and copy icons in one pkexec session
            DESKTOP_SCRIPT="/tmp/pingccx_desktop_$$"
            ICON_SCRIPT="/tmp/pingccx_icon_$$"
            
            # Get the real user before escalating privileges - try multiple methods
            if [ -n "${SUDO_USER}" ]; then
                REAL_USER="${SUDO_USER}"
            elif [ -n "${USER}" ]; then
                REAL_USER="${USER}"
            else
                REAL_USER="$(logname 2>/dev/null || id -un)"
            fi

            # Verify we got a valid username
            if [ -z "${REAL_USER}" ]; then
                zenity --error --title="Error" --text="Could not determine the current user."
                rm -f "${DESKTOP_SCRIPT}" "${ICON_SCRIPT}"
                exit 1
            fi

            # Define icons directory
            ICONS_DIR="/home/${REAL_USER}/.icons"

            # Create desktop file installation script
            cat > "${DESKTOP_SCRIPT}" << EOL
#!/bin/bash
cat > "${DESKTOP_FILE}" << EOF
[Desktop Entry]
Type=Application
Name=PingCCXPool
Comment=Ping Conceal Network mining pools
Exec=${APPIMAGE}
Icon=PingCCXPool
Categories=Network;Utility;
Terminal=false
EOF
chmod 644 "${DESKTOP_FILE}"
EOL

            # Create icon installation script
            cat > "${ICON_SCRIPT}" << EOL
#!/bin/bash

# Debug output
echo "Debug info:" > /tmp/icon_debug.log
echo "ICONS_DIR=${ICONS_DIR}" >> /tmp/icon_debug.log
echo "APPDIR=${APPDIR}" >> /tmp/icon_debug.log
echo "REAL_USER=${REAL_USER}" >> /tmp/icon_debug.log

mkdir -p "${ICONS_DIR}"
cp "${APPDIR}/PingCCXPool.png" "${ICONS_DIR}/PingCCXPool.png"
chown -R "${REAL_USER}:${REAL_USER}" "${ICONS_DIR}"
chmod 644 "${ICONS_DIR}/PingCCXPool.png"
EOL

            chmod 755 "${DESKTOP_SCRIPT}" "${ICON_SCRIPT}"
            
            DESKTOP_OK=0
            ICON_OK=0
            
            pkexec "${DESKTOP_SCRIPT}" || DESKTOP_OK=1
            pkexec "${ICON_SCRIPT}" || ICON_OK=1
            
            if [ $DESKTOP_OK -eq 1 ] || [ $ICON_OK -eq 1 ]; then
                if [ $DESKTOP_OK -eq 1 ]; then
                    zenity --error --title="Error" --text="Failed to create desktop shortcut."
                fi
                if [ $ICON_OK -eq 1 ]; then
                    if [ -f /tmp/icon_debug.log ]; then
                        DEBUG_INFO="$(cat /tmp/icon_debug.log)"
                        zenity --error --title="Error" --text="Failed to install application icon.\n\nDebug info:\n${DEBUG_INFO}"
                        rm -f /tmp/icon_debug.log
                    else
                        zenity --error --title="Error" --text="Failed to install application icon."
                    fi
                fi
            fi
            rm -f "${DESKTOP_SCRIPT}" "${ICON_SCRIPT}"
        fi
    fi
fi

# Change to binary directory to ensure access to resources
cd "$APPDIR/usr/bin"

# Launch the application
exec "./PingCCXPool" "$@"