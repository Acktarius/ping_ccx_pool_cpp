#!/bin/bash

# Function to check if a package is installed
check_package() {
    if ! command -v $1 &> /dev/null; then
        return 1
    fi
    return 0
}

# Get the directory where the AppImage is mounted
APPDIR="$(dirname "$(readlink -f "$0")")"

# 1. Check for zenity
if ! check_package zenity; then
    echo "Zenity is required. Please install it using your package manager and try again."
    exit 1
fi

# 2. Determine package manager
PM_NAME=""
PM_CMD=""
POLKIT_PKG=""

if command -v apt &> /dev/null; then
    PM_NAME="apt"
    PM_CMD="apt install -y"
    POLKIT_PKG="policykit-1"
elif command -v dnf &> /dev/null; then
    PM_NAME="dnf"
    PM_CMD="dnf install -y"
    POLKIT_PKG="polkit"
elif command -v pacman &> /dev/null; then
    PM_NAME="pacman"
    PM_CMD="pacman -S --noconfirm"
    POLKIT_PKG="polkit"
elif command -v zypper &> /dev/null; then
    PM_NAME="zypper"
    PM_CMD="zypper install -y"
    POLKIT_PKG="polkit"
else
    zenity --error --title="Error" --text="Could not detect package manager.\nPlease install required packages manually."
    exit 1
fi

# 3. Check and install polkit if needed
if ! command -v pkexec &> /dev/null; then
    if zenity --question \
        --title="Install Dependency" \
        --text="Polkit is required and needs to be installed.\nWould you like to install it now?" \
        --ok-label="Install" \
        --cancel-label="Cancel"; then
        
        if [ "$PM_NAME" = "pacman" ]; then
            sudo $PM_CMD $POLKIT_PKG
        else
            sudo $PM_CMD $POLKIT_PKG
        fi
        
        if ! command -v pkexec &> /dev/null; then
            zenity --error --title="Error" --text="Failed to install polkit. Please install it manually."
            exit 1
        fi

        # Install policy file after polkit is installed
        POLICY_FILE="$APPDIR/usr/share/PingCCXPool/resources/org.acktarius.nping.policy"
        if [ ! -f "/usr/share/polkit-1/actions/org.acktarius.nping.policy" ] && [ -f "$POLICY_FILE" ]; then
            if ! pkexec cp "$POLICY_FILE" /usr/share/polkit-1/actions/; then
                zenity --error --title="Error" --text="Failed to install polkit policy file."
                exit 1
            fi
        fi
    else
        exit 1
    fi
fi

# 4. Check and install nmap if needed
if ! check_package nping; then
    if zenity --question \
        --title="Install Dependency" \
        --text="Nmap is required and needs to be installed.\nWould you like to install it now?" \
        --ok-label="Install" \
        --cancel-label="Cancel"; then
        
        if ! pkexec $PM_CMD nmap; then
            zenity --error --title="Error" --text="Failed to install nmap. Please install it manually."
            exit 1
        fi
    else
        exit 1
    fi
fi

# Setup desktop file if not exists
if [ -n "$APPIMAGE" ]; then  # Only create desktop file if we're running as an AppImage
    DESKTOP_FILE="/usr/share/applications/PingCCXPool.desktop"
    if [ ! -f "$DESKTOP_FILE" ]; then
        if zenity --question \
            --title="Desktop Integration" \
            --text="Would you like to add PingCCXPool to your applications menu?" \
            --ok-label="Yes" \
            --cancel-label="No"; then
            
            # Create desktop file and copy icons in one pkexec session
            SETUP_SCRIPT=$(mktemp)
            cat > "$SETUP_SCRIPT" << EOL
#!/bin/bash
# Create desktop entry
cat > "$DESKTOP_FILE" << EOF
[Desktop Entry]
Type=Application
Name=PingCCXPool
Comment=Ping Conceal Network mining pools
Exec=$APPIMAGE
Icon=PingCCXPool
Categories=Network;Utility;
Terminal=false
EOF
chmod 644 "$DESKTOP_FILE"

# Setup icons
for SIZE in 128x128 256x256; do
    ICON_PATH="/usr/share/icons/hicolor/\$SIZE/apps"
    mkdir -p "\$ICON_PATH"
    cp "$APPDIR/usr/share/icons/hicolor/\$SIZE/apps/PingCCXPool.png" "\$ICON_PATH/PingCCXPool.png"
    chmod 644 "\$ICON_PATH/PingCCXPool.png"
done
EOL
            chmod +x "$SETUP_SCRIPT"
            
            if ! pkexec "$SETUP_SCRIPT"; then
                zenity --error --title="Error" --text="Failed to create desktop shortcut."
            fi
            rm "$SETUP_SCRIPT"
        fi
    fi
fi

# Change to binary directory to ensure access to resources
cd "$APPDIR/usr/bin"

# Launch the application
exec "./PingCCXPool" "$@"